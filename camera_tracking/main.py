import cv2from webcam_config import *from ble_config import *from bleak import BleakScanner, BleakClientfrom bleak.exc import BleakDeviceNotFoundErrorimport supervision as svimport numpy as npimport mediapipe as mpfrom ultralytics import YOLOasync def main():    devices = await BleakScanner.discover()    previous_detections = []    body_box_annotator = sv.BoxAnnotator(        thickness=2,        color=sv.Color(128, 0, 128),  # Purple        text_thickness=2,        text_scale=1    )    head_box_annotator = sv.BoxAnnotator(        thickness=2,        color=sv.Color(0, 255, 0), # Green        text_thickness = 2,        text_scale = 1    )    hand_box_annotator = sv.BoxAnnotator(        thickness=2,        color=sv.Color(0, 0, 255), # Red        text_thickness = 2,        text_scale = 1    )    while True:        try:            target_device = await search_for_device(target_device_name)            async with BleakClient(target_device.address) as client:                print("Connected to the target device")                while client.is_connected:                    ret, frame = cap.read()                    body_model = YOLO("yolov8n.pt")                    body_result = body_model(frame, agnostic_nms=True, classes=[0])[0]                    body_detections = sv.Detections.from_ultralytics(body_result)                    if body_detections and len(body_detections) == 1:                        print("body detected")                        for detection in body_detections:                            x_body, y_body, w_body, h_body = detection[0].astype(int)                            x_center = (x_body + w_body) / 2                            # Perform head detection within the bounding box of detected humans                            roi = frame[y_body:h_body, x_body:w_body]                            head_frame = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)                            head_classifier = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")                            head_detections = head_classifier.detectMultiScale(head_frame, scaleFactor=1.3, minNeighbors=2)                            if len(head_detections) == 1:                                print("head detected")                                # Use the first detected head                                (x_head, y_head, w_head, h_head) = head_detections[0].astype(int)                                y_center = y_body + ((y_head + h_head) / 2)                                print(f"Coordinates: X={x_center}, Y={y_center}")                                await send_coordinates(x_center, y_center, client, frame_width, frame_height)                                head_detection_array = np.array(head_detections[0])                                head_detection_custom = sv.Detections(xyxy=np.array([[                                    x_body + x_head,  # x_min                                    y_body + y_head,  # y_min                                    x_body + x_head + w_head,  # x_max                                    y_body + y_head + h_head,  # y_max                                ]]))                                frame = head_box_annotator.annotate(scene=frame, detections=head_detection_custom, labels=["Head"])                            else:                                print(f"Coordinates: X={x_center}, Y={0}")                                await send_coordinates(x_center, 0, client, frame_width, frame_height)                        frame = body_box_annotator.annotate(scene=frame, detections=body_detections[0][0], labels=["Body"])                    cv2.imshow("Main", frame)                    cv2.moveWindow("Main", 1050,180)                    key = cv2.waitKey(10)                    if key == 27:                        break                print("Disconnected from the target device")        except BleakDeviceNotFoundError as e:            print(f"Device {target_device_name} not found. Retrying...")            await asyncio.sleep(2)        except Exception as e:            print(f"An error occurred: {e}")            await asyncio.sleep(2)    else:        print(f"{target_device_name} not found in the scanned devices.")    cap.release()    cv2.destroyAllWindows()if __name__ == "__main__":    asyncio.run(main())